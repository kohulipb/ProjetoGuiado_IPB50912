//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Cameras"",
            ""id"": ""b3c46adb-7fce-46cf-8c05-2db56c340aa9"",
            ""actions"": [
                {
                    ""name"": ""changeToWide"",
                    ""type"": ""Button"",
                    ""id"": ""efb8bd3f-4784-4dc5-8e4d-c28f7d847628"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeToMid"",
                    ""type"": ""Button"",
                    ""id"": ""6bbd396b-79ad-4133-80b2-cc36b8c8edb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeToClose"",
                    ""type"": ""Button"",
                    ""id"": ""ed2fbc94-0023-4672-aa5a-fa286cea6f9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeToOrtho"",
                    ""type"": ""Button"",
                    ""id"": ""d896e720-ea64-4e50-a497-c58c4317a717"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeToDrone"",
                    ""type"": ""Button"",
                    ""id"": ""729597ea-24a1-45fb-82ae-ebb39aa6e9d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b518028a-5a94-4336-8e9b-5fb9b4c1821a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""changeToWide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e9fa9e9-f00a-4835-a4e8-0c0ddd95c507"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeToMid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be008efb-a0b0-4f9a-9c6c-01f3853edd51"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeToClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""105226e8-88d5-4d08-afa3-ad30b7a3dd5b"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeToOrtho"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22e72cbd-e3a6-48fd-bb78-1ac543522ec2"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeToDrone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""92903d44-5471-4f3c-92a5-477a70e5ed18"",
            ""actions"": [
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""8480c539-bfa3-4291-b156-e2aed8733b4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""cebbb0e9-6422-4956-ad0a-4f779f5820bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveFwrd"",
                    ""type"": ""Button"",
                    ""id"": ""c7b98eb6-0390-4369-92af-32d6ec3d7a16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveBack"",
                    ""type"": ""Button"",
                    ""id"": ""bb0387ab-0461-43b5-a481-fe43a1a5dcaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrottleUp"",
                    ""type"": ""Button"",
                    ""id"": ""47a57fd1-8557-4c4c-94d6-0e48ffdf670d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrottleDown"",
                    ""type"": ""Button"",
                    ""id"": ""790aa368-611c-43af-a975-a2ec4c4ecb4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YawLeft"",
                    ""type"": ""Button"",
                    ""id"": ""accdcf7a-820d-456b-ab69-2e806cb3518c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YawRight"",
                    ""type"": ""Button"",
                    ""id"": ""18b62036-c7b1-4042-8605-c54414ed2cb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a358dc44-57f6-4d0e-a406-e584adf673f6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ef009cf-d19b-48d1-b41b-539c7316e1f4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c481fc97-bd08-44da-8c8d-a3431f3f4023"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFwrd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df534b76-8ce0-4848-b578-62a92b890884"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""392834a7-57fd-418f-9826-baa99a6a87fa"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d625680e-8792-4d55-ac55-d9723b4fbc58"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d72d922f-a17a-4e96-9098-76cd335ed1a8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""850910ba-bc9d-449e-9996-eef60cd1ec45"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Cameras
        m_Cameras = asset.FindActionMap("Cameras", throwIfNotFound: true);
        m_Cameras_changeToWide = m_Cameras.FindAction("changeToWide", throwIfNotFound: true);
        m_Cameras_changeToMid = m_Cameras.FindAction("changeToMid", throwIfNotFound: true);
        m_Cameras_changeToClose = m_Cameras.FindAction("changeToClose", throwIfNotFound: true);
        m_Cameras_changeToOrtho = m_Cameras.FindAction("changeToOrtho", throwIfNotFound: true);
        m_Cameras_changeToDrone = m_Cameras.FindAction("changeToDrone", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_MoveLeft = m_Drone.FindAction("MoveLeft", throwIfNotFound: true);
        m_Drone_MoveRight = m_Drone.FindAction("MoveRight", throwIfNotFound: true);
        m_Drone_MoveFwrd = m_Drone.FindAction("MoveFwrd", throwIfNotFound: true);
        m_Drone_MoveBack = m_Drone.FindAction("MoveBack", throwIfNotFound: true);
        m_Drone_ThrottleUp = m_Drone.FindAction("ThrottleUp", throwIfNotFound: true);
        m_Drone_ThrottleDown = m_Drone.FindAction("ThrottleDown", throwIfNotFound: true);
        m_Drone_YawLeft = m_Drone.FindAction("YawLeft", throwIfNotFound: true);
        m_Drone_YawRight = m_Drone.FindAction("YawRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cameras
    private readonly InputActionMap m_Cameras;
    private List<ICamerasActions> m_CamerasActionsCallbackInterfaces = new List<ICamerasActions>();
    private readonly InputAction m_Cameras_changeToWide;
    private readonly InputAction m_Cameras_changeToMid;
    private readonly InputAction m_Cameras_changeToClose;
    private readonly InputAction m_Cameras_changeToOrtho;
    private readonly InputAction m_Cameras_changeToDrone;
    public struct CamerasActions
    {
        private @InputMaster m_Wrapper;
        public CamerasActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @changeToWide => m_Wrapper.m_Cameras_changeToWide;
        public InputAction @changeToMid => m_Wrapper.m_Cameras_changeToMid;
        public InputAction @changeToClose => m_Wrapper.m_Cameras_changeToClose;
        public InputAction @changeToOrtho => m_Wrapper.m_Cameras_changeToOrtho;
        public InputAction @changeToDrone => m_Wrapper.m_Cameras_changeToDrone;
        public InputActionMap Get() { return m_Wrapper.m_Cameras; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CamerasActions set) { return set.Get(); }
        public void AddCallbacks(ICamerasActions instance)
        {
            if (instance == null || m_Wrapper.m_CamerasActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CamerasActionsCallbackInterfaces.Add(instance);
            @changeToWide.started += instance.OnChangeToWide;
            @changeToWide.performed += instance.OnChangeToWide;
            @changeToWide.canceled += instance.OnChangeToWide;
            @changeToMid.started += instance.OnChangeToMid;
            @changeToMid.performed += instance.OnChangeToMid;
            @changeToMid.canceled += instance.OnChangeToMid;
            @changeToClose.started += instance.OnChangeToClose;
            @changeToClose.performed += instance.OnChangeToClose;
            @changeToClose.canceled += instance.OnChangeToClose;
            @changeToOrtho.started += instance.OnChangeToOrtho;
            @changeToOrtho.performed += instance.OnChangeToOrtho;
            @changeToOrtho.canceled += instance.OnChangeToOrtho;
            @changeToDrone.started += instance.OnChangeToDrone;
            @changeToDrone.performed += instance.OnChangeToDrone;
            @changeToDrone.canceled += instance.OnChangeToDrone;
        }

        private void UnregisterCallbacks(ICamerasActions instance)
        {
            @changeToWide.started -= instance.OnChangeToWide;
            @changeToWide.performed -= instance.OnChangeToWide;
            @changeToWide.canceled -= instance.OnChangeToWide;
            @changeToMid.started -= instance.OnChangeToMid;
            @changeToMid.performed -= instance.OnChangeToMid;
            @changeToMid.canceled -= instance.OnChangeToMid;
            @changeToClose.started -= instance.OnChangeToClose;
            @changeToClose.performed -= instance.OnChangeToClose;
            @changeToClose.canceled -= instance.OnChangeToClose;
            @changeToOrtho.started -= instance.OnChangeToOrtho;
            @changeToOrtho.performed -= instance.OnChangeToOrtho;
            @changeToOrtho.canceled -= instance.OnChangeToOrtho;
            @changeToDrone.started -= instance.OnChangeToDrone;
            @changeToDrone.performed -= instance.OnChangeToDrone;
            @changeToDrone.canceled -= instance.OnChangeToDrone;
        }

        public void RemoveCallbacks(ICamerasActions instance)
        {
            if (m_Wrapper.m_CamerasActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICamerasActions instance)
        {
            foreach (var item in m_Wrapper.m_CamerasActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CamerasActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CamerasActions @Cameras => new CamerasActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private List<IDroneActions> m_DroneActionsCallbackInterfaces = new List<IDroneActions>();
    private readonly InputAction m_Drone_MoveLeft;
    private readonly InputAction m_Drone_MoveRight;
    private readonly InputAction m_Drone_MoveFwrd;
    private readonly InputAction m_Drone_MoveBack;
    private readonly InputAction m_Drone_ThrottleUp;
    private readonly InputAction m_Drone_ThrottleDown;
    private readonly InputAction m_Drone_YawLeft;
    private readonly InputAction m_Drone_YawRight;
    public struct DroneActions
    {
        private @InputMaster m_Wrapper;
        public DroneActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_Drone_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_Drone_MoveRight;
        public InputAction @MoveFwrd => m_Wrapper.m_Drone_MoveFwrd;
        public InputAction @MoveBack => m_Wrapper.m_Drone_MoveBack;
        public InputAction @ThrottleUp => m_Wrapper.m_Drone_ThrottleUp;
        public InputAction @ThrottleDown => m_Wrapper.m_Drone_ThrottleDown;
        public InputAction @YawLeft => m_Wrapper.m_Drone_YawLeft;
        public InputAction @YawRight => m_Wrapper.m_Drone_YawRight;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void AddCallbacks(IDroneActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveFwrd.started += instance.OnMoveFwrd;
            @MoveFwrd.performed += instance.OnMoveFwrd;
            @MoveFwrd.canceled += instance.OnMoveFwrd;
            @MoveBack.started += instance.OnMoveBack;
            @MoveBack.performed += instance.OnMoveBack;
            @MoveBack.canceled += instance.OnMoveBack;
            @ThrottleUp.started += instance.OnThrottleUp;
            @ThrottleUp.performed += instance.OnThrottleUp;
            @ThrottleUp.canceled += instance.OnThrottleUp;
            @ThrottleDown.started += instance.OnThrottleDown;
            @ThrottleDown.performed += instance.OnThrottleDown;
            @ThrottleDown.canceled += instance.OnThrottleDown;
            @YawLeft.started += instance.OnYawLeft;
            @YawLeft.performed += instance.OnYawLeft;
            @YawLeft.canceled += instance.OnYawLeft;
            @YawRight.started += instance.OnYawRight;
            @YawRight.performed += instance.OnYawRight;
            @YawRight.canceled += instance.OnYawRight;
        }

        private void UnregisterCallbacks(IDroneActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveFwrd.started -= instance.OnMoveFwrd;
            @MoveFwrd.performed -= instance.OnMoveFwrd;
            @MoveFwrd.canceled -= instance.OnMoveFwrd;
            @MoveBack.started -= instance.OnMoveBack;
            @MoveBack.performed -= instance.OnMoveBack;
            @MoveBack.canceled -= instance.OnMoveBack;
            @ThrottleUp.started -= instance.OnThrottleUp;
            @ThrottleUp.performed -= instance.OnThrottleUp;
            @ThrottleUp.canceled -= instance.OnThrottleUp;
            @ThrottleDown.started -= instance.OnThrottleDown;
            @ThrottleDown.performed -= instance.OnThrottleDown;
            @ThrottleDown.canceled -= instance.OnThrottleDown;
            @YawLeft.started -= instance.OnYawLeft;
            @YawLeft.performed -= instance.OnYawLeft;
            @YawLeft.canceled -= instance.OnYawLeft;
            @YawRight.started -= instance.OnYawRight;
            @YawRight.performed -= instance.OnYawRight;
            @YawRight.canceled -= instance.OnYawRight;
        }

        public void RemoveCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneActions @Drone => new DroneActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ICamerasActions
    {
        void OnChangeToWide(InputAction.CallbackContext context);
        void OnChangeToMid(InputAction.CallbackContext context);
        void OnChangeToClose(InputAction.CallbackContext context);
        void OnChangeToOrtho(InputAction.CallbackContext context);
        void OnChangeToDrone(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveFwrd(InputAction.CallbackContext context);
        void OnMoveBack(InputAction.CallbackContext context);
        void OnThrottleUp(InputAction.CallbackContext context);
        void OnThrottleDown(InputAction.CallbackContext context);
        void OnYawLeft(InputAction.CallbackContext context);
        void OnYawRight(InputAction.CallbackContext context);
    }
}
